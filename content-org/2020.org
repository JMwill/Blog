# -*- mode: Org; org-download-image-dir: "~/Personal/blog/static/ox-hugo"; org-download-heading-lvl: nil; eval: (org-content 2); -*-
#+STARTUP: indent
#+HUGO_BASE_DIR: ../
#+HUGO_SECTION: ./posts
#+OPTIONS: author:nil
#+STARTUP: fninline logdone
#+hugo_auto_set_lastmod: t

* Posts
** DONE 始于 2020 的 Hugo 迁移
   CLOSED: [2020-04-19 Sun 02:09]
   :PROPERTIES:
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :slug 始于-2020-的-hugo-迁移
   :EXPORT_FILE_NAME: 2020-04-19-始于-2020-的-hugo-迁移
   :END:

 到今天为止，已经辞职一年了。在这一年的时间里面，只做了一件事情，虽然最后的结果不是自己想要的，但也算是了了心愿。借着博客的迁移，再次重新出发，努力追赶上一年时间里面落下的东西，巩固已有的能力，顺便在这里记录一下迁移过程。

*** 为何选用 Hugo？

 我的这个博客已经很久没有更新了，有很多理由可以说，但归根到底是觉得没有可以写的东西。以前每看一本书，或者了解到有新的技术时会做一些笔记，但不会把它写到博客上，然后时间久了之后就忘了这个博客的存在了。最近一年的时间里所做的事情告一段落之后，主动了解一下程序员常用的编辑器： [[https://www.gnu.org/software/emacs/][Emacs]] ，随后又了解到备受赞誉的： [[https://orgmode.org/][Org-mode]] 。使用 Emacs 的人几乎没有不使用 Org 的，甚至有些是因为 Org 才转用 Emacs 编辑器的。

 因为 Org 的功能强大，在尝试使用后我就决定以后常用 Emacs 以及 Org ，有了这个想法而且在网络上浏览文章时碰到 [[https://gohugo.io/][Hugo]] 这个静态博客构建系统，就想起来我自己也有一个博客，故此就顺着这个机会把博客迁移到 Hugo 来构建，结合 [[https://ox-hugo.scripter.co/][ox-hugo]] 来学习并体验 Org 的强大功能。

*** 迁移

 整体迁移过程就比较简单，先把就博客包含的内容都转移到备份的文件夹

 #+BEGIN_SRC shell
 mv * ../backup
 hugo new site .
 #+END_SRC

 新建完成后将原有的 Git 相关配置文件从 backup 中放回到项目下，因为旧博客使用的 Hexo 来构建，为了保证以前的文章路径不被破坏，或者如果你更喜欢 Hexo 类型的路径形式的话，需要在 config.toml 文件中加入配置：

 #+BEGIN_SRC toml
 [permalinks]
 posts = "/:year/:month/:day/:slug/"

 # 这里的 frontmatter 添加也可以，不添加也可以，只是修改 date 的默认行为改为从文件名处先获取
 [frontmatter]
 date = [":filename", ":default"]
 #+END_SRC

 旧文章迁移过去时有些不兼容的地方需要修改，例如日期格式从 ~YYYY-MM-DD HH:MM~ 改为 ~YYYY-MM-DDTHH:MM:SS+08:00~ 这种带时区的时间格式，具体可以参考：
 《把博客生成工具从 Hexo 迁移到 Hugo — 配置与设置》[fn:1]

 迁移过后，根据 Hugo 的新手入门测试一下效果，没问题就可以去主题站点选择一个喜爱的主题来替换，或者可以自己编写。

*** 自动化

 迁移到 Hugo 并不复杂，完成对应配置后，需要修改一下构建的设置文件，原来是使用 Travis CI 来自动构建，本次迁移当然少不了修改配置。

 #+BEGIN_SRC yaml
 language: go
 go:
   - master

 dist: xenial
 addons:
   snaps:
     - hugo
 #+END_SRC

 将之前的语言从 Node.js 换为 Go，构建的系统默认是 Linux，因此指定一下为 xenial 发行版。最后指定用 snaps 来安装 Hugo。snaps 上的 Hugo 版本基本与最新版保持同步。避免使用 apt-get 等方式来手动安装，原因是 Travis CI 上的默认 Linux 上的 apt-get 安装的都是旧版 Hugo，没法正确构建，而网上很多在 Travis CI 上安装 Hugo 的方式都是自己从 Github 上拉 =*.deb= 来安装，个人觉得这种方式更为繁琐且需要复杂的正则来匹配提取准确路径，容易出错。

 #+BEGIN_SRC yaml
 before_script:
   - rm -rf public 2> /dev/null

 script:
   - hugo version
   - hugo
 #+END_SRC

 之后就是在真正重新构建之前将以前构建出来的静态资源文件夹删除掉，然后再执行构建。

 余下的推送到 Github 上的命令则无需更改，因为两者都是用 public 作为静态资源构建的目标文件夹。没有弄过 Travis CI 的可以参考我的配置[fn:2]

*** 结尾

 博客的迁移工作基本流程就是这样，后续还需要在 Emacs 上安装 ox-hugo，编写一些 org capture template，加上截图函数，添加评论系统到博客等工作，这些就慢慢来吧。

** Footnotes

[fn:2] https://github.com/JMwill/blog/blob/master/.travis.yml
[fn:1] https://jdhao.github.io/2018/10/10/hexo_to_hugo/
** DONE WSL，Windows 与 Linux 的丝滑融合
CLOSED: [2020-05-17 Sun 00:10]
   :PROPERTIES:
   :EXPORT_FILE_NAME: 2020-04-22-wsl-windows-与-linux-的融合
   :END:
 偶然的机会，需要使用 Windows 来进行开发，由于我平时主要使用 MacOS 与 Linux 开发，所以在 Windows 上进行开发的时候也必不可少地需要使用命令行。一开始是只使用系统的 CMD 来执行任务，但是 Windows 下的命令行与 Linux 下的有诸多不同，使用起来束手束脚，十分不方便，即使是安装了 [[https://www.cygwin.com/][Cygwin]] 或者 [[https://cmder.net/][cmder]]，使用起来还是很别扭。

总的来说，以上的两个工具日常开发是勉强够用的，毕竟就只是运行一下命令。但是，如果已经习惯 Linux 下顺畅的命令行使用体验，且想要在 Windows 上也能实现的话在以前来说需要付出的劳动可不小，还不能保证稳定。不过随着 Windows 推出的 Windows Subsystem for Linux 简称：WSL 功能后，你可以在 Windows 上将 Linux 作为一个应用一样打开使用，在 WSL 中使用命令行开发，必要的时候可以直接使用 Windows 提供的工具。这一刻，Windows 终于放下身段开始与 Linux 交融起来了。如此一来，以 Windows 作为日常开发的操作系统在我看来也不是不可以接受的了。
*** 引入 WSL
上面说到 WSL 有多么好，但再好，也只有在尝试后才能确定是否是自己的菜，具体的安装方法可以按照官方提供的操作：[[https://docs.microsoft.com/en-us/windows/wsl/install-win10][【官方】安装 WSL]]，喜欢尝鲜的可以看这里：[[https://docs.microsoft.com/en-us/windows/wsl/wsl2-install][【官方】安装 WSL 2]]，值得一提的是许多公司内部的网络对访问的站点进行了自定义的限制，会导致 Windows 的更新以及获取 WSL 安装包的过程受阻，如果遇到无法在应用商店里下载 WSL 运行包的情况的话可以参照：[[https://docs.microsoft.com/en-us/windows/wsl/install-manual][【官方】WSL 离线安装]]，下载下来的安装包甚至可以直接双击安装，也是很便捷的一种方式。

安装完 WSL 后，通过呼出开始窗口，输入（假设安装的是 Ubuntu）：Ubuntu ，弹出的窗口里面运行的就是 Ubuntu 版的 WSL。

到此，一个 Windows 下的 Linux 子系统就好了，基本上 Linux 支持的都可以在这个子系统里面做。但是，如果仅仅是要运行个子系统的话，直接用虚拟机 VMware 之类的早就可以做到。确实，如果只是要用一个 Linux 系统，虚拟机就可以包办。不过讲到融合，虚拟机暂时是追不上的。因为我主要做 Web 开发，下面就介绍我的一些开发配置作为参考，其他的大家可以按照需要发掘。

*** 配置环境

**** 串联 Linux 与 Windows
在 WSL 启动后，除了可以使用常用的 Linux 命令，还有一个十分有用的特定需要用起来，那就是： **调用 Windows 命令** ，如何调用呢？直接输入命令名称。例如：

#+BEGIN_SRC sh
# 在浏览文件夹的时候突然想要在 Windows 文件夹中查看或者预览
explore.exe ~/folder/you/want/to/open/
# 或者
explore.exe ~/file/you/want/to/open.txt

# 当你需要复制文件中的文字时
cat ~/file/you/want.txt | clip.exe
#+END_SRC

上面的例子通过组合 Linux 以及 Windows 命令，整个开发体验直线上升。

我个人并不是直接使用 Windows 的命令而是将它 alias 一下，如将 =explore.exe= 变为 =wopen= ，与 MacOS 以及 Linux 上的 =open= 命令对应起来。

**** 安装 Visual Studio Code
Web 开发少不了使用这个热门编辑器，在 Windows 上安装完后，通常我比较习惯在浏览文件夹时直接用 =code= 命令来打开项目文件夹。一开始使用 WSL 的时候还以为不可以这样做了，很是苦恼了一阵子。后面偶然的机会了解到 WSL 以及 VSCode 的开发人员们已经处理好了这个问题，在 Windows 上安装完后直接在 WSL 上输入 =code= 指令就会触发安装需要的内容，完成后 VSCode 会打开，并需要安装插件支持，常用的开发插件也会要求你重装。安装的插件可以参考：[[https://code.visualstudio.com/docs/remote/wsl][【官方】在 WSL 上开发]]，这里的介绍比较完善，不过上面安装的插件应该换成是：[[https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-wsl][Remote - WSL]]，可能是还没有更新到。

至此，Web 所需要的基本开发环境就完成了。不过，开发环境这种东西是永远配置不完的，只要一天在开发，就会不断地完善；就像厨师的刀具，不断地磨砺，直到顺手。

**** 完善环境

在 Linux 之类的环境上开发的时候，我比较喜欢用 [[http://zsh.sourceforge.net/][Zsh]] 结合 [[https://ohmyz.sh/][Oh My Zsh]]，不过安装完后，如果使用一些主题的话，需要面临字体不合适的问题。如果使用的主题需要的字体找不到的话此时打开的界面将会十分丑陋
#+DOWNLOADED: https://s1.ax1x.com/2020/05/16/Yc5JLn.png @ 2020-05-16 21:20:36
[[file:/blog/ox-hugo/Yc5JLn_2020-05-16_21-20-36.png]]

想要解决这个问题可以遵照以下的步骤：

1. 下载所需的字体，如：[[https://www.nerdfonts.com/font-downloads][Nerd Font]]
2. 遵照 [[https://support.microsoft.com/zh-cn/help/314960/how-to-install-or-remove-a-font-in-windows][Windows 的指南]]来将字体安装到系统中
3. VSCode 需要进行配置，在 config.json 中添加： ="terminal.integrated.fontFamily": "主题需要的字体名称",=
4. 如果仅仅需要用 Shell 可以用 [[https://gist.github.com/romkatv/aa7a70fe656d8b655e3c324eb10f6a8b][这个方法]] 来修复主题字体问题，不过，最好的方式是在 PowerShell 的菜单栏右键，选择「属性-字体」修改默认字体为所需字体，或者使用喜欢的第三方 Shell

以上就是完善的设置，如果使用的是 fish shell 的话可以参考[[https://gist.github.com/nixin72/20dec757e021bb9e594c6f087acfe609][这里]]。

具体的开发过程中需要使用到的许多软件、工具就不在这里一一列出，实际开发的时候有需要再安装就可以。最后再推荐一下将键盘上的 CapsLock 键利用起来，这个键放在如此方便的位置却只是用作切换大小写实在是太浪费了。有兴趣的可以产考[[https://www.jianshu.com/p/ab0b79713359][这篇文章]]来设置。改键工具的文档在[[https://wyagd001.github.io/zh-cn/docs/Program.htm][这里]]


*** 结尾
上面就是这段时间使用 Windows 开发过程中总结下来的经验，期间自己的环境安装文件也出了许多问题，比如：[[https://stackoverflow.com/questions/44455001/how-to-change-pip3-command-to-be-pip][pip 的重命名]]，[[https://realpython.com/intro-to-pyenv/][pyenv 安装前依赖未确认]]等，都一并写在这里记录下来作为自己的[[https://wiki.mbalib.com/wiki/%25E7%25BB%2584%25E7%25BB%2587%25E8%25BF%2587%25E7%25A8%258B%25E8%25B5%2584%25E4%25BA%25A7][过程资产]]吧。

*** 补充
这里补充一下使用过程中遇到的问题，方便日后索引。

**** Git 配置
现今的开发工作基本离不开 Git 等版本管理库，使用 WSL 的过程中，由于公司内部禁止了 ssh 连接，使用 http 下载程序包时就需要输入对应内网的 Gitlab 平台账号密码。为了减少输入密码等工作，在翻找了资料之后找到了解决办法：[[https://git-scm.com/book/en/v2/Git-Tools-Credential-Storage][信任凭证存储]]，通过存储凭证，能够在输入一次账号密码后即免除后续的重复输入，凭证的设置分为几个等级以及不同平台的处理，对于 WSL，如果无需与 Windows 系统共享的话，可以直接使用 store 选项，存储在文件中，否则则需要安装 Windows 平台对应需要的支持软件。

对应地，安装了 Windows 软件后，WSL 内的 helper 配置路径就需要设置为 Windows 下的位置，形如： ~git config --global credential.helper "/mnt/c/Program\ Files/Git/mingw64/libexec/git-core/git-credential-manager.exe "~ ，具体可参考[[https://zitseng.com/archives/19588][这篇文章]]。