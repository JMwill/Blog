<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" 
  xmlns:content="http://purl.org/rss/1.0/modules/content/" 
  xmlns:dc="http://purl.org/dc/elements/1.1/" 
  xmlns:atom="http://www.w3.org/2005/Atom" 
  xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" 
  xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>Will&#39;s Blog</title>
    <link>https://jmwill.github.io/blog/</link>
    <description>Recent content on Will&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <managingEditor>willsurpriseyou@foxmail.com (Will)</managingEditor>
    <webMaster>willsurpriseyou@foxmail.com (Will)</webMaster>
    <copyright>©{year}, All Rights Reserved</copyright>
    <lastBuildDate>Sun, 17 May 2020 00:10:00 +0800</lastBuildDate>
    
        <atom:link href="https://jmwill.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    
      
      
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      

      
      <item>
        <title>WSL，Windows 与 Linux 的丝滑融合</title>
        <link>https://jmwill.github.io/blog/2020/05/17/wslwindows-%E4%B8%8E-linux-%E7%9A%84%E4%B8%9D%E6%BB%91%E8%9E%8D%E5%90%88/</link>
        <pubDate>Sun, 17 May 2020 00:10:00 +0800</pubDate>
        <author>willsurpriseyou@foxmail.com (Will)</author>
        <atom:modified>Mon, 20 Jul 2020 10:37:43 +0800</atom:modified>
        <guid>https://jmwill.github.io/blog/2020/05/17/wslwindows-%E4%B8%8E-linux-%E7%9A%84%E4%B8%9D%E6%BB%91%E8%9E%8D%E5%90%88/</guid>
        <description>偶然的机会，需要使用 Windows 来进行开发，由于我平时主要使用 MacOS 与 Linux 开发，所以在 Windows 上进行开发的时候也必不可少地需要使用命令行。一开始是只使用系统的 CMD 来</description>
        
        <dc:creator>Will</dc:creator>
        
        
        
        
        
        
      </item>
      
      <item>
        <title>始于 2020 的 Hugo 迁移</title>
        <link>https://jmwill.github.io/blog/2020/04/19/%E5%A7%8B%E4%BA%8E-2020-%E7%9A%84-hugo-%E8%BF%81%E7%A7%BB/</link>
        <pubDate>Sun, 19 Apr 2020 02:09:00 +0800</pubDate>
        <author>willsurpriseyou@foxmail.com (Will)</author>
        <atom:modified>Sat, 16 May 2020 17:20:20 +0800</atom:modified>
        <guid>https://jmwill.github.io/blog/2020/04/19/%E5%A7%8B%E4%BA%8E-2020-%E7%9A%84-hugo-%E8%BF%81%E7%A7%BB/</guid>
        <description>到今天为止，已经辞职一年了。在这一年的时间里面，只做了一件事情，虽然最后的结果不是自己想要的，但也算是了了心愿。借着博客的迁移，再次重新出发</description>
        
        <dc:creator>Will</dc:creator>
        
        
        
        
        
        
      </item>
      
      <item>
        <title>程序构成-第四章</title>
        <link>https://jmwill.github.io/blog/2017/06/11/%E7%A8%8B%E5%BA%8F%E6%9E%84%E6%88%90-%E7%AC%AC%E5%9B%9B%E7%AB%A0/</link>
        <pubDate>Sun, 11 Jun 2017 16:57:56 +0800</pubDate>
        <author>willsurpriseyou@foxmail.com (Will)</author>
        <atom:modified>Sun, 11 Jun 2017 16:57:56 +0800</atom:modified>
        <guid>https://jmwill.github.io/blog/2017/06/11/%E7%A8%8B%E5%BA%8F%E6%9E%84%E6%88%90-%E7%AC%AC%E5%9B%9B%E7%AB%A0/</guid>
        <description>&lt;h2 id=&#34;第四章-数据处理&#34;&gt;第四章: 数据处理&lt;/h2&gt;
&lt;h3 id=&#34;41-介绍&#34;&gt;4.1 介绍&lt;/h3&gt;
&lt;p&gt;现代计算机可以处理大量表示世界许多方面的数据. 从这些大数据集合, 我们可以以前所未有的方式学习到人类的相关行为: 语言是如何使用的, 拍摄什么照片, 讨论什么话题, 以及人们是如何跟他们周围的环境来接触的. 为了高效地处理大数据集合, 程序被组织成对有序的数据流进行操作的管道. 在本章, 我们会考虑一套的技术来处理并操纵有序数据流.&lt;/p&gt;</description>
        
        <dc:creator>Will</dc:creator>
        
        
        
        
          
            
              <category>译文</category>
            
          
            
              <category>Design Programs</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>程序构成-第三章</title>
        <link>https://jmwill.github.io/blog/2017/06/11/%E7%A8%8B%E5%BA%8F%E6%9E%84%E6%88%90-%E7%AC%AC%E4%B8%89%E7%AB%A0/</link>
        <pubDate>Sun, 11 Jun 2017 16:57:45 +0800</pubDate>
        <author>willsurpriseyou@foxmail.com (Will)</author>
        <atom:modified>Sun, 11 Jun 2017 16:57:45 +0800</atom:modified>
        <guid>https://jmwill.github.io/blog/2017/06/11/%E7%A8%8B%E5%BA%8F%E6%9E%84%E6%88%90-%E7%AC%AC%E4%B8%89%E7%AB%A0/</guid>
        <description>&lt;h2 id=&#34;第三章-解析计算机程序&#34;&gt;第三章: 解析计算机程序&lt;/h2&gt;
&lt;h3 id=&#34;31-介绍&#34;&gt;3.1 介绍&lt;/h3&gt;
&lt;p&gt;章节1以及2描述了两个程序的基本要素之间的紧密联系: 函数以及数据. 我们已经见识过函数是如何在高阶函数中被当做数据来操作. 我们也见识过数据是如何通过消息传递以及一个对象系统而被赋予行为的. 我们也学习了用来组织大型程序的技术, 例如函数抽象, 数据抽象, 类继承, 以及一般函数. 这些关键概念构成了建立模块化, 可维护, 可扩展的程序的坚实基础.&lt;/p&gt;</description>
        
        <dc:creator>Will</dc:creator>
        
        
        
        
          
            
              <category>译文</category>
            
          
            
              <category>Design Programs</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>程序构成-第二章</title>
        <link>https://jmwill.github.io/blog/2017/06/11/%E7%A8%8B%E5%BA%8F%E6%9E%84%E6%88%90-%E7%AC%AC%E4%BA%8C%E7%AB%A0/</link>
        <pubDate>Sun, 11 Jun 2017 16:57:25 +0800</pubDate>
        <author>willsurpriseyou@foxmail.com (Will)</author>
        <atom:modified>Sun, 11 Jun 2017 16:57:25 +0800</atom:modified>
        <guid>https://jmwill.github.io/blog/2017/06/11/%E7%A8%8B%E5%BA%8F%E6%9E%84%E6%88%90-%E7%AC%AC%E4%BA%8C%E7%AB%A0/</guid>
        <description>&lt;h2 id=&#34;第二章-构筑抽象数据&#34;&gt;第二章: 构筑抽象数据&lt;/h2&gt;
&lt;h3 id=&#34;21-介绍&#34;&gt;2.1 介绍&lt;/h3&gt;
&lt;p&gt;在第一章我们集中关注计算过程, 以及函数对程序设计的作用与影响. 我们已经见识过如何使用原始数据(numbers)以及原始操作符(算术), 如何通过组合和控制来组成复合函数, 以及通过给计算过程赋予名称来创建函数抽抽象. 我们也看到高阶函数通过允许我们自行控制, 从而推理出一般计算方法来增强我们的语言的力量. 这就是编程的本质.&lt;/p&gt;</description>
        
        <dc:creator>Will</dc:creator>
        
        
        
        
          
            
              <category>译文</category>
            
          
            
              <category>Design Programs</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>程序构成-第一章</title>
        <link>https://jmwill.github.io/blog/2017/03/09/%E7%A8%8B%E5%BA%8F%E6%9E%84%E6%88%90-%E7%AC%AC%E4%B8%80%E7%AB%A0/</link>
        <pubDate>Thu, 09 Mar 2017 09:18:16 +0800</pubDate>
        <author>willsurpriseyou@foxmail.com (Will)</author>
        <atom:modified>Thu, 09 Mar 2017 09:18:16 +0800</atom:modified>
        <guid>https://jmwill.github.io/blog/2017/03/09/%E7%A8%8B%E5%BA%8F%E6%9E%84%E6%88%90-%E7%AC%AC%E4%B8%80%E7%AB%A0/</guid>
        <description>&lt;h2 id=&#34;第一章用函数构筑抽象&#34;&gt;第一章：用函数构筑抽象&lt;/h2&gt;
&lt;h3 id=&#34;11-开始&#34;&gt;1.1 开始&lt;/h3&gt;
&lt;p&gt;计算机科学是极为广泛的科学。涉及的领域有全球的分布式系统，人工智能，机器人，图形学，安全，科学计算，计算机体系结构以及每年发掘的大量新兴的子领域对新技术的相关拓展。计算机科学的快速发展使得人类生活中的各个方面都收到影响。商业，通讯，科学，艺术，休闲，以及政治都在计算机领域被重新发明了。&lt;/p&gt;</description>
        
        <dc:creator>Will</dc:creator>
        
        
        
        
          
            
              <category>译文</category>
            
          
            
              <category>Design Programs</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>【译】ES6的350个要点概述</title>
        <link>https://jmwill.github.io/blog/2016/12/16/%E8%AF%91es6%E7%9A%84350%E4%B8%AA%E8%A6%81%E7%82%B9%E6%A6%82%E8%BF%B0/</link>
        <pubDate>Fri, 16 Dec 2016 17:04:42 +0800</pubDate>
        <author>willsurpriseyou@foxmail.com (Will)</author>
        <atom:modified>Fri, 16 Dec 2016 17:04:42 +0800</atom:modified>
        <guid>https://jmwill.github.io/blog/2016/12/16/%E8%AF%91es6%E7%9A%84350%E4%B8%AA%E8%A6%81%E7%82%B9%E6%A6%82%E8%BF%B0/</guid>
        <description>前言： 我的深入ES6系列由24篇覆盖了未来ES6中大多数语法以及特性的改变的文章组成。这篇文章的目的是总结所有的要点，提供给你ES6中最切实</description>
        
        <dc:creator>Will</dc:creator>
        
        
        
        
          
            
              <category>译文</category>
            
          
            
              <category>ES6</category>
            
          
            
              <category>JavaScript</category>
            
          
            
              <category>Front End</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>【译】生命是一场游戏，而这是一份攻略</title>
        <link>https://jmwill.github.io/blog/2016/06/29/%E8%AF%91%E7%94%9F%E5%91%BD%E6%98%AF%E4%B8%80%E5%9C%BA%E6%B8%B8%E6%88%8F%E8%80%8C%E8%BF%99%E6%98%AF%E4%B8%80%E4%BB%BD%E6%94%BB%E7%95%A5/</link>
        <pubDate>Wed, 29 Jun 2016 11:07:03 +0800</pubDate>
        <author>willsurpriseyou@foxmail.com (Will)</author>
        <atom:modified>Wed, 29 Jun 2016 11:07:03 +0800</atom:modified>
        <guid>https://jmwill.github.io/blog/2016/06/29/%E8%AF%91%E7%94%9F%E5%91%BD%E6%98%AF%E4%B8%80%E5%9C%BA%E6%B8%B8%E6%88%8F%E8%80%8C%E8%BF%99%E6%98%AF%E4%B8%80%E4%BB%BD%E6%94%BB%E7%95%A5/</guid>
        <description>&lt;p&gt;&lt;img src=&#34;https://jmwill.github.io/blog/blog/images/2016/06/Cover-shallow-1024x626.png&#34; alt=&#34;img of press to start&#34; /&gt;&lt;/p&gt;</description>
        
        <dc:creator>Will</dc:creator>
        
        
        
        
          
            
              <category>翻译</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>复习正则表达式</title>
        <link>https://jmwill.github.io/blog/2015/11/17/%E5%A4%8D%E4%B9%A0%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link>
        <pubDate>Tue, 17 Nov 2015 15:56:49 +0800</pubDate>
        <author>willsurpriseyou@foxmail.com (Will)</author>
        <atom:modified>Tue, 17 Nov 2015 15:56:49 +0800</atom:modified>
        <guid>https://jmwill.github.io/blog/2015/11/17/%E5%A4%8D%E4%B9%A0%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</guid>
        <description>因为一些开发需求需要用到正则表达式，但是实际开发中每用一次正则就重看一次这样的事情实在是羞愧至极，所以在这里再进行一次正则的复习。以求能够较</description>
        
        <dc:creator>Will</dc:creator>
        
        
        
        
          
            
              <category>笔记</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>javascript构造函数</title>
        <link>https://jmwill.github.io/blog/2015/11/02/javascript%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/</link>
        <pubDate>Mon, 02 Nov 2015 19:02:21 +0800</pubDate>
        <author>willsurpriseyou@foxmail.com (Will)</author>
        <atom:modified>Mon, 02 Nov 2015 19:02:21 +0800</atom:modified>
        <guid>https://jmwill.github.io/blog/2015/11/02/javascript%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/</guid>
        <description>什么是构造函数？构造函数在JavaScript中也就是一个普通的函数，之所以能成为构造函数是因为需要使用其来进行对象的构造。而构造新对象的情</description>
        
        <dc:creator>Will</dc:creator>
        
        
        
        
          
            
              <category>javascript</category>
            
          
            
              <category>笔记</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>javascript面向对象编程</title>
        <link>https://jmwill.github.io/blog/2015/11/02/javascript%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/</link>
        <pubDate>Mon, 02 Nov 2015 19:01:54 +0800</pubDate>
        <author>willsurpriseyou@foxmail.com (Will)</author>
        <atom:modified>Mon, 02 Nov 2015 19:01:54 +0800</atom:modified>
        <guid>https://jmwill.github.io/blog/2015/11/02/javascript%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/</guid>
        <description>根据阮一峰大大所说JavaScript是一种基于对象的语言，但由于缺失了类这一个语法特性，JavaScript又不是一种面向对象编程的语言。</description>
        
        <dc:creator>Will</dc:creator>
        
        
        
        
          
            
              <category>javascript</category>
            
          
            
              <category>笔记</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>javascript闭包</title>
        <link>https://jmwill.github.io/blog/2015/10/29/javascript%E9%97%AD%E5%8C%85/</link>
        <pubDate>Thu, 29 Oct 2015 15:02:18 +0800</pubDate>
        <author>willsurpriseyou@foxmail.com (Will)</author>
        <atom:modified>Thu, 29 Oct 2015 15:02:18 +0800</atom:modified>
        <guid>https://jmwill.github.io/blog/2015/10/29/javascript%E9%97%AD%E5%8C%85/</guid>
        <description>预备知识 this 在JavaScript中，this指向函数执行时的当前对象。this关键字在JavaScript中和执行环境，而非声明环境有关。而</description>
        
        <dc:creator>Will</dc:creator>
        
        
        
        
          
            
              <category>javascript</category>
            
          
            
              <category>笔记</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>javascript原型链</title>
        <link>https://jmwill.github.io/blog/2015/10/28/javascript%E5%8E%9F%E5%9E%8B%E9%93%BE/</link>
        <pubDate>Wed, 28 Oct 2015 14:25:17 +0800</pubDate>
        <author>willsurpriseyou@foxmail.com (Will)</author>
        <atom:modified>Wed, 28 Oct 2015 14:25:17 +0800</atom:modified>
        <guid>https://jmwill.github.io/blog/2015/10/28/javascript%E5%8E%9F%E5%9E%8B%E9%93%BE/</guid>
        <description>Ecmascript 6之前，JavaScript不包含传统的类，JavaScript中对象通过原型链进行继承，通过原型链就能够让函数成为对象的方法。 对象 在理解</description>
        
        <dc:creator>Will</dc:creator>
        
        
        
        
          
            
              <category>javascript</category>
            
          
            
              <category>笔记</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>JavaScript作用域</title>
        <link>https://jmwill.github.io/blog/2015/10/17/javascript%E4%BD%9C%E7%94%A8%E5%9F%9F/</link>
        <pubDate>Sat, 17 Oct 2015 18:48:39 +0800</pubDate>
        <author>willsurpriseyou@foxmail.com (Will)</author>
        <atom:modified>Sat, 17 Oct 2015 18:48:39 +0800</atom:modified>
        <guid>https://jmwill.github.io/blog/2015/10/17/javascript%E4%BD%9C%E7%94%A8%E5%9F%9F/</guid>
        <description>JavaScript（以下简称js）中作用域有全局作用域与局部作用域两种，这里重点讲局部作用域。 什么是作用域？ 字面意思来看，作用域就是某样事</description>
        
        <dc:creator>Will</dc:creator>
        
        
        
        
          
            
              <category>javascript</category>
            
          
            
              <category>笔记</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>HTTP协议学习</title>
        <link>https://jmwill.github.io/blog/2015/10/16/http%E5%8D%8F%E8%AE%AE%E5%AD%A6%E4%B9%A0/</link>
        <pubDate>Fri, 16 Oct 2015 21:11:44 +0800</pubDate>
        <author>willsurpriseyou@foxmail.com (Will)</author>
        <atom:modified>Fri, 16 Oct 2015 21:11:44 +0800</atom:modified>
        <guid>https://jmwill.github.io/blog/2015/10/16/http%E5%8D%8F%E8%AE%AE%E5%AD%A6%E4%B9%A0/</guid>
        <description>&lt;h2 id=&#34;http协议&#34;&gt;HTTP协议&lt;/h2&gt;
&lt;p&gt;HTTP协议属于应用层的协议，由于简捷、快速等原因适用于web，对于HTTP协议来说，它需要建立在能提供可靠交付的底层协议上，而TCP/IP协议正好满足，于是，HTTP协议基本都是建立在TCP/IP上。同时，HTTP协议属于无状态协议，无状态表明，协议对于事务处理没有记忆能力，一次链接就是一次链接，与上一次以及下一次链接没有关系。&lt;/p&gt;</description>
        
        <dc:creator>Will</dc:creator>
        
        
        
        
          
            
              <category>笔记</category>
            
          
            
              <category>web</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>构建windows下的django开发环境</title>
        <link>https://jmwill.github.io/blog/2015/09/26/%E6%9E%84%E5%BB%BAwindows%E4%B8%8B%E7%9A%84django%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</link>
        <pubDate>Sat, 26 Sep 2015 20:07:33 +0800</pubDate>
        <author>willsurpriseyou@foxmail.com (Will)</author>
        <atom:modified>Sat, 26 Sep 2015 20:07:33 +0800</atom:modified>
        <guid>https://jmwill.github.io/blog/2015/09/26/%E6%9E%84%E5%BB%BAwindows%E4%B8%8B%E7%9A%84django%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</guid>
        <description>转回windows系统后，用于老师方面的项目还没有完结，因此需要在windows下进行django的开发。现在先记录一下windows下的环</description>
        
        <dc:creator>Will</dc:creator>
        
        
        
        
        
        
      </item>
      
      <item>
        <title>创建舒服的Ubuntu开发环境</title>
        <link>https://jmwill.github.io/blog/2015/09/13/%E5%88%9B%E5%BB%BA%E8%88%92%E6%9C%8D%E7%9A%84ubuntu%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</link>
        <pubDate>Sun, 13 Sep 2015 15:40:26 +0800</pubDate>
        <author>willsurpriseyou@foxmail.com (Will)</author>
        <atom:modified>Sun, 13 Sep 2015 15:40:26 +0800</atom:modified>
        <guid>https://jmwill.github.io/blog/2015/09/13/%E5%88%9B%E5%BB%BA%E8%88%92%E6%9C%8D%E7%9A%84ubuntu%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</guid>
        <description>因为office的强大覆盖范围，我又无奈地投入到了windows的怀抱。但是之前使用Linux时手指在键盘上点击如飞的感觉实在是爽，于是，我</description>
        
        <dc:creator>Will</dc:creator>
        
        
        
        
        
        
      </item>
      
      <item>
        <title>ubuntu下搭建Hexo博客</title>
        <link>https://jmwill.github.io/blog/2015/03/17/ubuntu%E4%B8%8B%E6%90%AD%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2/</link>
        <pubDate>Tue, 17 Mar 2015 20:39:32 +0800</pubDate>
        <author>willsurpriseyou@foxmail.com (Will)</author>
        <atom:modified>Tue, 17 Mar 2015 20:39:32 +0800</atom:modified>
        <guid>https://jmwill.github.io/blog/2015/03/17/ubuntu%E4%B8%8B%E6%90%AD%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2/</guid>
        <description>&lt;h2 id=&#34;ubuntu上制作hexo博客&#34;&gt;ubuntu上制作Hexo博客&lt;/h2&gt;
&lt;p&gt;现在这个国内氛围里，我们什么都要求最低成本，所以咯，我们现在就搭建个免费的博客来使用一下下吧！(￣▽￣)~*&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://hexo.io/&#34;&gt;hexo&lt;/a&gt;是一个基于Node.js的静态博客程序，可以方便的生成静态网页托管在github上。其作者是来自台湾的**@tommy351**。我们搭建**hexo**这个东东，是拿做博客的嘛，那想要找个地方来放我们写下的文章，应该要放到哪里呢，答案当然是大热的github上啦。所以我们需要先装上git和node.js。因此，我们又可以趁机来学一下node.js了。不多说，开工。&lt;/p&gt;</description>
        
        <dc:creator>Will</dc:creator>
        
        
        
        
          
            
              <category>Ubuntu</category>
            
          
            
              <category>Hexo</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>Django学习笔记</title>
        <link>https://jmwill.github.io/blog/2015/03/16/django%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
        <pubDate>Mon, 16 Mar 2015 17:26:43 +0800</pubDate>
        <author>willsurpriseyou@foxmail.com (Will)</author>
        <atom:modified>Mon, 16 Mar 2015 17:26:43 +0800</atom:modified>
        <guid>https://jmwill.github.io/blog/2015/03/16/django%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
        <description>&lt;h2 id=&#34;初步接触记录1&#34;&gt;初步接触记录1：&lt;/h2&gt;
&lt;h4 id=&#34;建立一个项目&#34;&gt;建立一个项目：&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;在需要储存代码的目录内运行以下命令：&lt;code&gt;django-admin.py startproject your_porject_name&lt;/code&gt;，会生成以下目录结构：&lt;/li&gt;
&lt;/ul&gt;</description>
        
        <dc:creator>Will</dc:creator>
        
        
        
        
          
            
              <category>笔记</category>
            
          
            
              <category>Python</category>
            
          
            
              <category>Django</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>Python学习笔记</title>
        <link>https://jmwill.github.io/blog/2015/03/16/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
        <pubDate>Mon, 16 Mar 2015 17:16:27 +0800</pubDate>
        <author>willsurpriseyou@foxmail.com (Will)</author>
        <atom:modified>Mon, 16 Mar 2015 17:16:27 +0800</atom:modified>
        <guid>https://jmwill.github.io/blog/2015/03/16/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
        <description>&lt;h2 id=&#34;入门所学知识&#34;&gt;入门所学知识：&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;python中print的方法跟c语言的基本一样，同样可以使用&lt;code&gt;print &#39;output %s, something %s.&#39; %(temp1, temp2)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;raw字符串与多行字符串：&lt;code&gt;r&#39;...&#39;&lt;/code&gt;免于对字符串&lt;strong&gt;使用转义符&lt;/strong&gt;，但是无法表示多行字符，以及包含**’**和**“**的字符串， 可以使用r&amp;rsquo;&#39;&amp;rsquo;&amp;hellip;&amp;lsquo;&amp;lsquo;&amp;lsquo;来表示多行字符串&lt;/li&gt;
&lt;li&gt;unicode字符串：在字符串前加&lt;strong&gt;u&lt;/strong&gt;字符，当出现中文编码错误的时候可以在文件第一行添加注释 &lt;code&gt;# -*- coding: utf-8 -*-&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;python中的与运算，或运算，非运算使用的分别时&lt;strong&gt;and&lt;/strong&gt;， &lt;strong&gt;or&lt;/strong&gt;， &lt;strong&gt;not&lt;/strong&gt;关键字来实现&lt;/li&gt;
&lt;/ol&gt;</description>
        
        <dc:creator>Will</dc:creator>
        
        
        
        
          
            
              <category>笔记</category>
            
          
            
              <category>Python</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>《javascript语言精粹》记录</title>
        <link>https://jmwill.github.io/blog/2015/03/16/javascript%E8%AF%AD%E8%A8%80%E7%B2%BE%E7%B2%B9%E8%AE%B0%E5%BD%95/</link>
        <pubDate>Mon, 16 Mar 2015 17:04:42 +0800</pubDate>
        <author>willsurpriseyou@foxmail.com (Will)</author>
        <atom:modified>Mon, 16 Mar 2015 17:04:42 +0800</atom:modified>
        <guid>https://jmwill.github.io/blog/2015/03/16/javascript%E8%AF%AD%E8%A8%80%E7%B2%BE%E7%B2%B9%E8%AE%B0%E5%BD%95/</guid>
        <description>&lt;p&gt;javascript中存在着很多糟糕的特性：全局变量的轻易添加，无块级作用域，&lt;strong&gt;==&lt;/strong&gt; 判断的不精确性等等，&lt;br /&gt;
但是它同时也具有许多精华的特性，对象字面量生成，函数字面量生成，使用原型继承的机制。&lt;/p&gt;</description>
        
        <dc:creator>Will</dc:creator>
        
        
        
        
          
            
              <category>笔记</category>
            
          
            
              <category>javascript</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>git建立本地仓库</title>
        <link>https://jmwill.github.io/blog/2015/03/16/git%E5%BB%BA%E7%AB%8B%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93/</link>
        <pubDate>Mon, 16 Mar 2015 16:21:35 +0800</pubDate>
        <author>willsurpriseyou@foxmail.com (Will)</author>
        <atom:modified>Mon, 16 Mar 2015 16:21:35 +0800</atom:modified>
        <guid>https://jmwill.github.io/blog/2015/03/16/git%E5%BB%BA%E7%AB%8B%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93/</guid>
        <description>&lt;p&gt;近来，因为现实原因，经常处于断网的状态（掩面T_T），所以就突发奇想在本地建立个仓库存储自己的代码，手贱的时候也可以有后悔药吃。不多说，上流程&lt;/p&gt;</description>
        
        <dc:creator>Will</dc:creator>
        
        
        
        
          
            
              <category>笔记</category>
            
          
            
              <category>Git</category>
            
          
        
        
        
      </item>
      
      <item>
        <title></title>
        <link>https://jmwill.github.io/blog/notes/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        <author>willsurpriseyou@foxmail.com (Will)</author>
        
        <guid>https://jmwill.github.io/blog/notes/</guid>
        <description></description>
        
        <dc:creator>Will</dc:creator>
        
        
        
        
        
        
      </item>
      

    
  </channel>
</rss>